<Page
    x:Class="Turbo.Control.UWP.Views.LandingPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:Turbo.Control.UWP.Views"
    xmlns:controls="using:Turbo.Control.UWP.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    DataContext="{Binding RelativeSource={RelativeSource Mode=Self}}"
    mc:Ignorable="d">
    <Page.Resources>
        <Flyout x:Name="ConnectionFlyout" Placement="Left">
            <StackPanel Orientation="Vertical">
                <TextBlock Style="{StaticResource BodyTextBlockStyle}" Width="300" Margin="10,10,10,10" Name="ConnectionFlyoutText" Text="Connecting" TextWrapping="Wrap" />
                <ProgressRing IsActive="True" Width="40" Height="40" Margin="10,10,10,10"/>
            </StackPanel>
        </Flyout>
    </Page.Resources>
    <Grid x:Name="LayoutRoot"
            Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"
            EntranceNavigationTransitionInfo.IsTargetElement="True"
            Padding="24,0">
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource MediumWindowSnapPoint}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="LayoutRoot.Margin" Value="24,0"/>
                        <Setter Target="HeaderTextBlock.Style" Value="{StaticResource PageTitleTextBlockStyle}"/>
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource MinWindowSnapPoint}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="LayoutRoot.Margin" Value="12,0"/>
                        <Setter Target="HeaderTextBlock.Style" Value="{StaticResource NarrowPageTitleTextBlockStyle}"/>
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition />
        </Grid.RowDefinitions>

        <controls:PageHeader x:Name="pageHeader" Grid.Row="0">
            <controls:PageHeader.HeaderContent>
                <TextBlock x:Name="HeaderTextBlock" Style="{StaticResource PageTitleTextBlockStyle}" Text="App Overview"/>
            </controls:PageHeader.HeaderContent>
        </controls:PageHeader>

        <StackPanel Grid.Row="1">
            <controls:Joypad Width="200" Height="200" Canvas.ZIndex="1" Moved="Joypad_Moved" Released="Joypad_Released" Captured="Joypad_Captured"/>
            <TextBlock Name="JoypadValues">Test</TextBlock>
        </StackPanel>
        <ScrollViewer Grid.Row="2" EntranceNavigationTransitionInfo.IsTargetElement="True" IsTabStop="True">
            <StackPanel x:Name="ContentContainer" Margin="12,0,12,0">
                <Ellipse x:Name="ellColor" HorizontalAlignment="Left" Height="50" VerticalAlignment="Top" Width="50"/>
                <TextBlock Style="{StaticResource SubtitleTextBlockStyle}">Top-Level Navigation</TextBlock>
                <TextBlock Style="{StaticResource BodyTextBlockStyle}" Margin="0,4">This sample demonstrates a universal Windows app with top-level navigation.</TextBlock>

                <TextBlock Style="{StaticResource SubtitleTextBlockStyle}" Margin="0,12,0,4">Overview</TextBlock>
                <TextBlock Style="{StaticResource BodyTextBlockStyle}" Margin="0,4">The root of the app is an AppShell of type Page instead of a Frame.
                    It uses a SplitView to present both the top-level navigation menu and a Frame for navigating between pages in the app.  The AppShell also
                    provides basic keyboarding behavior for unhandled key presses.  The navigation menu is implemented using a customized ListView and
                    to enable the expected keyboarding experience.  The "hamburger" button for the app is floating in the top corner of the app at a
                    higher z-order.  To enable content on individual pages to be aware of the floating "hamburger" the app uses a PageHeader control
                    that is aware of the "hamburger".
                </TextBlock>

                <TextBlock Style="{StaticResource SubtitleTextBlockStyle}" Margin="0,12,0,4">Things to see:</TextBlock>
                <TextBlock Style="{StaticResource BodyTextBlockStyle}" Margin="0,8"> 1) App.xaml - The startup sequence using AppShell as the root element instead of a Frame.</TextBlock>
                <TextBlock Style="{StaticResource BodyTextBlockStyle}" Margin="0,8"> 2) AppShell.xaml - The "chrome" of the app.</TextBlock>
                <TextBlock Style="{StaticResource BodyTextBlockStyle}" Margin="0,8"> 3) PageHeader.xaml - Control to wrap an item on a Page to avoid visual overlap with the floating hamburger.</TextBlock>
                <TextBlock Style="{StaticResource BodyTextBlockStyle}" Margin="0,8"> 4) Styles.xaml - Styles including one for a hamburger button.</TextBlock>
                <TextBlock Style="{StaticResource BodyTextBlockStyle}" Margin="0,8"> 5) NavMenuListView class - A customized ListView to show the navigation items and handle keyboarding.</TextBlock>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</Page>
